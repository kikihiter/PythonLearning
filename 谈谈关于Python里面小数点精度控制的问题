https://www.cnblogs.com/herbert/p/3402245.html

Herbert's Blog
盛年不重来，一日难再晨，及时当勉励，岁月不待人

导航
博客园
首页
新随笔
联系
订阅订阅
管理
<	2018年9月	>
日	一	二	三	四	五	六
26	27	28	29	30	31	1
2	3	4	5	6	7	8
9	10	11	12	13	14	15
16	17	18	19	20	21	22
23	24	25	26	27	28	29
30	1	2	3	4	5	6
统计
随笔 - 195
文章 - 0
评论 - 115
引用 - 0
公告
本博客所有文章仅限于个人学习研究使用，代码未经允许，禁止商业传播，转载请注明出处。博客中的Euler Problem问题的解答仅限于参考，还请自己独立思考。
昵称：类型安全的心
园龄：8年6个月
粉丝：90
关注：2
+加关注
搜索

 找找看

 谷歌搜索
常用链接
我的随笔
我的评论
我的参与
最新评论
我的标签
我的标签
python3 distribute setuptools easy install windows(1)
随笔分类
ADO.NET(2)
C#学习(25)
COM(1)
Euler Project(4)
Python实践(17)
SQL Server(17)
基本功训练(24)
软件测试技术(4)
杂知识(15)
随笔档案
2013年12月 (5)
2013年11月 (2)
2013年10月 (4)
2013年8月 (3)
2013年5月 (2)
2013年1月 (10)
2012年9月 (3)
2011年10月 (7)
2011年9月 (8)
2011年2月 (4)
2011年1月 (28)
2010年12月 (4)
2010年11月 (8)
2010年10月 (2)
2010年9月 (6)
2010年8月 (6)
2010年7月 (31)
2010年6月 (25)
2010年5月 (15)
2010年4月 (1)
2010年3月 (21)
文章分类
编程基本功训练
相册
生活集(1)
最新评论
1. Re:谈谈关于Python里面小数点精度控制的问题
楼主,怎么转载.我已经复制一份到我的博客上去.在开头标上楼主的这篇文章地址可否?
--显示名称已经被使用
2. Re:谈谈关于Python里面小数点精度控制的问题
ROUND_HALF_EVEN， 当half的时候，靠近even.
这是什么意思?
--显示名称已经被使用
3. Re:如何设置C#程序在Windows 7 Vista下以管理员权限运行
Severity	Code	Description	Project	File	Line	Suppression StateError ClickOnce does not support the r.......
--Gavin_Ding
4. Re:谈谈关于Python里面小数点精度控制的问题
round的那个，应该叫银行家算法。早先用在账目计算时，尽量在统计上减小误差。因为每次5都进位是不公平的。账务条目数多了的话容易多很多。所以奇数的后面，5是进位的；偶数的后面，5是不进位的。...
--咲神
5. Re:谈谈关于Python里面小数点精度控制的问题
第二段代码小数那边解释不太对。小数的话，和整数位的数字也有关系
--白石麻衣
阅读排行榜
1. 谈谈关于Python里面小数点精度控制的问题(178888)
2. Python 3 collections.defaultdict() 与 dict的使用和区别(39335)
3. 常见排序算法（冒泡，选择，快速）的C语言实现【修正版】(29662)
4. C# Excel 行高,列宽,合并单元格,单元格边框线,冻结（转载） - 关于C#操作EXCLE常见操作比较全的(26376)
5. Python 关于 name main的使用(26149)
评论排行榜
1. [Project Euler]加入欧拉 Problem 13 被卡住了，调试不出正确结果囧(21)
2. 谈谈关于Python里面小数点精度控制的问题(10)
3. SQL Server通用分页存储过程(6)
4. 常见排序算法（冒泡，选择，快速）的C语言实现【修正版】(6)
5. [读书笔记]自动化测试框架(4)
推荐排行榜
1. 谈谈关于Python里面小数点精度控制的问题(12)
2. 常见排序算法（冒泡，选择，快速）的C语言实现【修正版】(8)
3. 再谈collections模块defaultdict()和namedtuple()(4)
4. Python 3 collections.defaultdict() 与 dict的使用和区别(4)
5. ADO.NET中调用存储过程(4)
谈谈关于Python里面小数点精度控制的问题
基础
浮点数是用机器上浮点数的本机双精度(64 bit)表示的。提供大约17位的精度和范围从-308到308的指数。和C语言里面的double类型相同。Python不支持32bit的单精度浮点数。如果程序需要精确控制区间和数字精度，可以考虑使用numpy扩展库。

 

Python 3.X对于浮点数默认的是提供17位数字的精度。

 

关于单精度和双精度的通俗解释：

单精度型和双精度型，其类型说明符为float 单精度说明符，double 双精度说明符。在Turbo C中单精度型占4个字节（32位）内存空间，其数值范围为3.4E-38～3.4E+38，只能提供七位有效数字。双精度型占8 个字节（64位）内存空间，其数值范围为1.7E-308～1.7E+308，可提供16位有效数字。

 

要求较小的精度
将精度高的浮点数转换成精度低的浮点数。

1.round()内置方法
这个是使用最多的，刚看了round()的使用解释，也不是很容易懂。round()不是简单的四舍五入的处理方式。

For the built-in types supporting round(), values are rounded to the closest multiple of 10 to the power minus ndigits; if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0, and round(1.5) is 2).

1
2
3
4
5
6
7
8
>>> round(2.5)
2
>>> round(1.5)
2
>>> round(2.675)
3
>>> round(2.675, 2)
2.67
 round()如果只有一个数作为参数，不指定位数的时候，返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数，这就是为什么round(2.5) = 2。当指定取舍的小数点位数的时候，一般情况也是使用四舍五入的规则，但是碰到.5的这样情况，如果要取舍的位数前的小树是奇数，则直接舍弃，如果偶数这向上取舍。看下面的示例：

1
2
3
4
5
6
7
8
9
10
>>> round(2.635, 2)
2.63
>>> round(2.645, 2)
2.65
>>> round(2.655, 2)
2.65
>>> round(2.665, 2)
2.67
>>> round(2.675, 2)
2.67
 2. 使用格式化
效果和round（）是一样的。

1
2
3
4
5
6
7
8
9
>>> a = ("%.2f" % 2.635)
>>> a
'2.63'
>>> a = ("%.2f" % 2.645)
>>> a
'2.65'
>>> a = int(2.5)
>>> a
2
 

要求超过17位的精度分析
python默认的是17位小数的精度，但是这里有一个问题，就是当我们的计算需要使用更高的精度（超过17位小数）的时候该怎么做呢？

1. 使用格式化(不推荐)
1
2
3
>>> a = "%.30f" % (1/3)
>>> a
'0.333333333333333314829616256247'
 可以显示，但是不准确，后面的数字往往没有意义。

2. 高精度使用decimal模块，配合getcontext
1
2
3
4
5
6
7
8
9
10
11
12
>>> from decimal import *
>>> print(getcontext())
Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])
>>> getcontext().prec = 50
>>> b = Decimal(1)/Decimal(3)
>>> b
Decimal('0.33333333333333333333333333333333333333333333333333')
>>> c = Decimal(1)/Decimal(17)
>>> c
Decimal('0.058823529411764705882352941176470588235294117647059')
>>> float(c)
0.058823529411764705
 默认的context的精度是28位，可以设置为50位甚至更高，都可以。这样在分析复杂的浮点数的时候，可以有更高的自己可以控制的精度。其实可以留意下context里面的这rounding=ROUND_HALF_EVEN 参数。ROUND_HALF_EVEN， 当half的时候，靠近even.

 

关于小数和取整
既然说到小数，就必然要说到整数。一般取整会用到这些函数：

1. round()
这个不说了，前面已经讲过了。一定要注意它不是简单的四舍五入，而是ROUND_HALF_EVEN的策略。

2. math模块的ceil(x)
取大于或者等于x的最小整数。

3. math模块的floor(x)
去小于或者等于x的最大整数。

1
2
3
4
5
6
7
8
9
10
11
12
13
14
>>> from math import ceil, floor
>>> round(2.5)
2
>>> ceil(2.5)
3
>>> floor(2.5)
2
>>> round(2.3)
2
>>> ceil(2.3)
3
>>> floor(2.3)
2
>>>
 

伪python爱好者，正宗测试实践者。
分类: Python实践
好文要顶 关注我 收藏该文    
类型安全的心
关注 - 2
粉丝 - 90
+加关注
12 1
« 上一篇：Python时间性能测量
» 下一篇：Euler Level 2
posted on 2013-11-01 16:57 类型安全的心 阅读(178888) 评论(10) 编辑 收藏

评论
#1楼 2015-12-06 09:49 zqiguoshang  
总结的很好~
支持(0)反对(0)
  
#2楼 2016-09-02 11:15 橘子柚子橙子  
谢谢，学习了~~
支持(0)反对(0)
  
#3楼 2017-06-27 03:01 ☆磊☆  
print(round(2.605, 2)) # 2.6
print(round(2.615, 2)) # 2.62
print(round(2.625, 2)) # 2.62
刚开始学Python，但是出现这三个貌似有问题，不知道如何解释，求教。
还是说在Python 3.6中round已经变得不可预测了。
支持(0)反对(0)
  
#4楼 2017-08-18 15:58 Camilleyayang  
@ ☆磊☆
是这样的，5前面的数字如果是奇数的话就进1，如果是偶数的话就不进，和我们平时学的四舍五入有所不同。这种计数方式在水文工作上使用比较多，有大量数据时，按照这种方法可以减小误差。
支持(0)反对(0)
  
#5楼 2017-12-25 22:37 非了  
您好，关于3楼的提问，不知道博主是否有时间回答一下
支持(0)反对(0)
  
#6楼 2017-12-25 22:46 非了  
从楼主给出的答案看，偶数和奇数的书没有看懂啊
支持(0)反对(0)
  
#7楼 2018-01-15 10:50 白石麻衣  
第二段代码小数那边解释不太对。小数的话，和整数位的数字也有关系
支持(0)反对(0)
  
#8楼 2018-01-31 08:48 咲神  
round的那个，应该叫银行家算法。
早先用在账目计算时，尽量在统计上减小误差。因为每次5都进位是不公平的。账务条目数多了的话容易多很多。
所以奇数的后面，5是进位的；偶数的后面，5是不进位的。
支持(0)反对(0)
  
#9楼 2018-06-09 23:29 显示名称已经被使用  
ROUND_HALF_EVEN， 当half的时候，靠近even.
这是什么意思?
支持(0)反对(0)
  
#10楼 2018-06-09 23:36 显示名称已经被使用  
楼主,怎么转载.我已经复制一份到我的博客上去.在开头标上楼主的这篇文章地址可否?
支持(0)反对(0)
  
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
最新IT新闻:
· 酒局沉浮录：强人刘强东遭遇生死劫
· 五年后，我们或许就能坐上时速600公里的磁浮高铁了
· 人民日报：什么比“留住张小平”更重要？
· 罗振宇2018跨年演讲主题出来了 想要跟你谈谈小趋势
· 在美团小米的破发中，“绿鞋”起了什么作用？
» 更多新闻...
最新知识库文章:
· 为什么说 Java 程序员必须掌握 Spring Boot ？
· 在学习中，有一个比掌握知识更重要的能力
· 如何招到一个靠谱的程序员
· 一个故事看懂“区块链”
· 被踢出去的用户
» 更多知识库文章...
Powered by: 
博客园 
Copyright © 类型安全的心
